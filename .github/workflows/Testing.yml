name: Python Tests

on:
    workflow_dispatch:
        inputs:
            vm_ip:
                description: 'IP of the VM to run tests on'
                required: true
                default: 'Testing VM IP here'
            unit_tests:
                description: 'Space-separated unit test NAMES(no extension) to run'
                required: true
                default: unit_test_1 unit_test_2'
            integration_tests:
                description: 'Space separated integration test NAMES(no extension) to run'
                required: true
                default: 'Integration_1 Integration_2'
            e2e_tests:
                description: 'Space-separated e2e test NAMES(no extension) to run'
                required: true
                default: 'e2e_test_1 e2e_test_2'
            log_action:
              description: 'Choose action for Cloudwatch log group'
              required: true
              type: choice
              options:
                - 'create'
                - 'keep'
                - 'delete'
              default: 'keep'
jobs:
    run-tests:
        runs-on: ubuntu-latest

        steps:

            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.10'
        
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Set BASE_URL environment variable
              run: echo "BASE_URL=http://${{ github.event.inputs.vm_ip }}:5000" >> $GITHUB_ENV

            - name: Run unit tests
              run: |
                pytest -k "$(echo '${{ github.event.inputs.unit_tests }}' | sed 's/,/ or /g')" |  tee unit_tests_output.txt
              env:
                BASE_URL: ${{ env.BASE_URL }}

            - name: Run Integration tests
              run: |
                pytest -k "$(echo '${{ github.event.inputs.integration_tests }}' | sed 's/,/ or /g')" | tee integration_tests_output.txt
              env:
                BASE_URL: ${{ env.BASE_URL }}

            - name: Run e2e tests
              run: |
                pytest -k "$(echo '${{ github.event.inputs.e2e_tests }}' | sed 's/,/ or /g')" | tee e2e_tests_output.txt
              env:
                BASE_URL: ${{ env.BASE_URL }}

            - name: Format log output for CloudWatch
              run: |
                jq -R -s '[{ "timestamp": '$(date +%s000)', "message": . }]' < unit_tests_output.txt > unit_tests_log.json
                jq -R -s '[{ "timestamp": '$(date +%s000)', "message": . }]' < integration_tests_output.txt > integration_tests_log.json
                jq -R -s '[{ "timestamp": '$(date +%s000)', "message": . }]' < e2e_tests_output.txt > e2e_tests_log.json
              
            - name: Manage CloudWatch log groups and streams
              env:
                AWS_REGION: ${{ secrets.AWS_REGION }}
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              run: |
                if [[ "${{ github.event.inputs.log_action }}" == "create" ]]; then
                  # Create the log group, streams and add logs to it
                  
                  echo "Creating new log group and streams and adding logs.."
                  aws logs create-log-group --region $AWS_REGION --log-group-name ApplicationTests
                  
                  aws logs create-log-stream --log-group-name ApplicationTests --log-stream-name unit_tests
                  aws logs create-log-stream --log-group-name ApplicationTests --log-stream-name integration_tests
                  aws logs create-log-stream --log-group-name ApplicationTests --log-stream-name e2e_tests

                  aws logs put-log-events --log-group-name ApplicationTests --log-stream-name unit_tests --log-events file://unit_tests_log.json
                  aws logs put-log-events --log-group-name ApplicationTests --log-stream-name integration_tests --log-events file://integration_tests_log.json
                  aws logs put-log-events --log-group-name ApplicationTests --log-stream-name e2e_tests --log-events file://e2e_tests_log.json
                fi

                if [[ "${{ github.event.inputs.log_action }}" == "keep" ]]; then
                  # If the log group exists, just proceed with adding logs
                  echo "Log group already exists, adding logs..."
                  aws logs put-log-events --log-group-name ApplicationTests --log-stream-name unit_tests --log-events file://unit_tests_log.json
                  aws logs put-log-events --log-group-name ApplicationTests --log-stream-name integration_tests --log-events file://integration_tests_log.json
                  aws logs put-log-events --log-group-name ApplicationTests --log-stream-name e2e_tests --log-events file://e2e_tests_log.json
                fi

                if [[ "${{ github.event.inputs.log_action }}" == "delete" ]]; then
                  echo "Deleting log groups and streams, not using generated logs.."
                  aws logs delete-log-group --log-group-name ApplicationTests
                  echo "Log group deletion completed"
                fi
                



        

        
