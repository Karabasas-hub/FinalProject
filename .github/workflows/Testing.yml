name: Python Tests

on:
    workflow_dispatch:
        inputs:
            vm_ip:
                description: 'IP of the VM to run tests on'
                required: true
                default: 'Testing VM IP here'
            unit_tests:
                description: 'Space-separated unit test NAMES(no extension) to run'
                required: true
                default: unit_test_1 unit_test_2'
            integration_tests:
                description: 'Space separated integration test NAMES(no extension) to run'
                required: true
                default: 'Integration_1 Integration_2'
            e2e_tests:
                description: 'Space-separated e2e test NAMES(no extension) to run'
                required: true
                default: 'e2e_test_1 e2e_test_2'
            log_action:
              description: 'Choose action for Cloudwatch log group'
              required: true
              type: choice
              options:
                - 'create'
                - 'keep'
                - 'delete'
              default: 'keep'
jobs:
    run-tests:
        runs-on: ubuntu-latest

        steps:

            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.10'
        
            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Set BASE_URL environment variable
              run: echo "BASE_URL=http://${{ github.event.inputs.vm_ip }}:5000" >> $GITHUB_ENV

            - name: Run unit tests
              run: |
                pytest -k "$(echo '${{ github.event.inputs.unit_tests }}' | sed 's/,/ or /g')" |  tee unit_tests_output.txt
              env:
                BASE_URL: ${{ env.BASE_URL }}

            - name: Run Integration tests
              run: |
                pytest -k "$(echo '${{ github.event.inputs.integration_tests }}' | sed 's/,/ or /g')" | tee integration_tests_output.txt
              env:
                BASE_URL: ${{ env.BASE_URL }}

            - name: Run e2e tests
              run: |
                pytest -k "$(echo '${{ github.event.inputs.e2e_tests }}' | sed 's/,/ or /g')" | tee e2e_tests_output.txt
              env:
                BASE_URL: ${{ env.BASE_URL }}

            - name: Check and delete existing Log Groups
              run: |
                LOG_GROUP_NAME="/github/actions/tests"
                if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" | grep -q "$LOG_GROUP_NAME"; then 
                  echo "Log group exists... Deleting..."
                  aws logs delete-log-group --log-group-name "$LOG_GROUP_NAME"
                fi
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

            - name: Format log output for CloudWatch
              run: |
                jq -R -s '[{ "timestamp": '$(date +%s000)', "message": . }]' < unit_tests_output.txt > unit_tests_log.json
                jq -R -s '[{ "timestamp": '$(date +%s000)', "message": . }]' < integration_tests_output.txt > integration_tests_log.json
                jq -R -s '[{ "timestamp": '$(date +%s000)', "message": . }]' < e2e_tests_output.txt > e2e_tests_log.json
              
            - name: Manage Cloudwatch log groups and streams
              run: |
                if [[ "${{ github.event.inputs.log_action }}" == "create" ]]; then
                  # Check if the log group exists and delete it if necessary
                  LOG_GROUP_EXISTS=$(aws logs describe-log-groups --log-group-name-prefix "/github/actions/tests" --query "logGroups[?logGroupName=='/github/actions/tests']" --output text)
                  if [[ "$LOG_GROUP_EISTS" != "" ]]; then
                  echo "Log group exists. Deleting"
                  aws logs delete-log-group --log-group-name /github/actions/tests
                fi

                if [[ "${{ github.event.inputs.log_action }}" == "keep" ]]; then
                  echo "Log group is created and healthy. Adding logs.."
                fi

            - name: Upload results to cloudwatch
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
              run: |
                aws logs create-log-group --log-group-name /github/actions/tests
                aws logs create-log-stream --log-group-name /github/actions/tests --log-stream-name unit_tests
                aws logs create-log-stream --log-group-name /github/actions/tests --log-stream-name integration_tests
                aws logs create-log-stream --log-group-name /github/actions/tests --log-stream-name e2e_tests

                aws logs put-log-events --log-group-name /github/actions/tests --log-stream-name unit_tests --log-events file://unit_tests_log.json
                aws logs put-log-events --log-group-name /github/actions/tests --log-stream-name integration_tests --log-events file://integration_tests_log.json
                aws logs put-log-events --log-group-name /github/actions/tests --log-stream-name e2e_tests --log-events file://e2e_tests_log.json

            - name: Delete Cloudwatch resources if so selected
              run: |
                echo "Deleting all Cloudwatch resources"
                aws logs delete-log-group --log-group-name /github/actions/tests
                echo "Cloudwatch resources deleted, skipping tests"



        

        
