- name: Build and deploy API app
  hosts: all
  become: true
  tasks:
    # Starting Docker
    - name: Start docker service
      service:
        name: docker
        state: started
        enabled: true
        
    # Copying main_app.py into the VM
    - name: Copy main_app.py from repo to ec2
      ansible.builtin.copy:
        src: ../main_app.py
        dest: /home/ubuntu/api_app/
        owner: ubuntu
        group: ubuntu
        mode: '0755'

      # Copying the Dockerfile into the vm
    - name: Copy Dockerfile from repo to ec2
      ansible.builtin.copy:
        src: ../Dockerfile
        dest: /home/ubuntu/api_app/
        owner: ubuntu
        group: ubuntu
        mode: '0755'

      # Copying requirements.txt into the vm
    - name: Copy requirements.txt from repo to ec2
      ansible.builtin.copy:
        src: ../requirements.txt
        dest: /home/ubuntu/api_app/
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # Building the Docker image of the application in the Docker container
    - name: Build the docker image of the app
      command: docker build -t karabasas/my-api-app:latest /home/ubuntu/api_app
      register: build_result
      
    # Stopping and removing any container that is currently running the app
    - name: Remove existing API running containers
      docker_container:
        name: my-api-app
        state: absent
        
    # Launching the container with the application
    - name: Start API app Docker container
      docker_container:
        name: my-api-app
        image: karabasas/my-api-app:latest
        state: started
        ports:
          - "5000:5000" # Mapping port 5000 of the VM to port 5000 of the container
        restart_policy: always
        env:
          AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
          AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
          AWS_REGION: "{{ lookup('env', 'AWS_REGION') }}"
        restart: true
        

